#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 256

// Huffman Tree Node
struct MinHeapNode {
    char data;
    unsigned freq;
    struct MinHeapNode *left, *right;
};

// Min Heap Structure
struct MinHeap {
    unsigned size;
    unsigned capacity;
    struct MinHeapNode **array;
};

// Create a new node
struct MinHeapNode* newNode(char data, unsigned freq) {
    struct MinHeapNode* temp = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));
    temp->left = temp->right = NULL;
    temp->data = data;
    temp->freq = freq;
    return temp;
}

// Create a Min Heap
struct MinHeap* createMinHeap(unsigned capacity) {
    struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (struct MinHeapNode**)malloc(minHeap->capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}

// Swap two min heap nodes
void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b) {
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}

// Heapify
void minHeapify(struct MinHeap* minHeap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->freq < minHeap->array[smallest]->freq)
        smallest = left;
    if (right < minHeap->size && minHeap->array[right]->freq < minHeap->array[smallest]->freq)
        smallest = right;
    if (smallest != idx) {
        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
}

// Extract Min
struct MinHeapNode* extractMin(struct MinHeap* minHeap) {
    struct MinHeapNode* temp = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    --minHeap->size;
    minHeapify(minHeap, 0);
    return temp;
}

// Insert node into Min Heap
void insertMinHeap(struct MinHeap* minHeap, struct MinHeapNode* minHeapNode) {
    ++minHeap->size;
    int i = minHeap->size - 1;
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) {
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    minHeap->array[i] = minHeapNode;
}

// Build Huffman Tree
struct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size) {
    struct MinHeap* minHeap = createMinHeap(size);
    for (int i = 0; i < size; ++i)
        minHeap->array[i] = newNode(data[i], freq[i]);
    minHeap->size = size;
    while (minHeap->size != 1) {
        struct MinHeapNode *left = extractMin(minHeap);
        struct MinHeapNode *right = extractMin(minHeap);
        struct MinHeapNode *top = newNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;
        insertMinHeap(minHeap, top);
    }
    return extractMin(minHeap);
}

// Store codes in table
void storeCodes(struct MinHeapNode* root, int arr[], int top, char codes[MAX_SIZE][MAX_SIZE]) {
    if (root->left) {
        arr[top] = 0;
        storeCodes(root->left, arr, top + 1, codes);
    }
    if (root->right) {
        arr[top] = 1;
        storeCodes(root->right, arr, top + 1, codes);
    }
    if (!root->left && !root->right) {
        arr[top] = '\0';
        for (int i = 0; i < top; i++)
            codes[(int)root->data][i] = arr[i] + '0';
        codes[(int)root->data][top] = '\0';
    }
}

// Encode input string
void encode(char *input, char codes[MAX_SIZE][MAX_SIZE], char *encoded) {
    strcpy(encoded, "");
    for (int i = 0; input[i] != '\0'; i++)
        strcat(encoded, codes[(int)input[i]]);
}

// Decode encoded string
void decode(struct MinHeapNode* root, char *encoded) {
    struct MinHeapNode* curr = root;
    printf("Decoded Text: ");
    for (int i = 0; encoded[i] != '\0'; i++) {
        curr = (encoded[i] == '0') ? curr->left : curr->right;
        if (!curr->left && !curr->right) {
            printf("%c", curr->data);
            curr = root;
        }
    }
    printf("\n");
}

// Driver Function
int main() {
    char input[MAX_SIZE];
    printf("Enter text: ");
    scanf("%s", input);
    int freq[MAX_SIZE] = {0};
    for (int i = 0; input[i] != '\0'; i++)
        freq[(int)input[i]]++;
   
    char chars[MAX_SIZE];
    int freqArr[MAX_SIZE], n = 0;
    for (int i = 0; i < MAX_SIZE; i++) {
        if (freq[i] > 0) {
            chars[n] = (char)i;
            freqArr[n] = freq[i];
            n++;
        }
    }
    struct MinHeapNode* root = buildHuffmanTree(chars, freqArr, n);
    char codes[MAX_SIZE][MAX_SIZE] = {{0}};
    int arr[MAX_SIZE], top = 0;
    storeCodes(root, arr, top, codes);
    printf("Character | Frequency | Huffman Code\n");
    for (int i = 0; i < n; i++)
        printf("   %c      |    %d      | %s\n", chars[i], freqArr[i], codes[(int)chars[i]]);
   
    char encoded[MAX_SIZE * 8];
    encode(input, codes, encoded);
    printf("Encoded Text: %s\n", encoded);
    decode(root, encoded);
    return 0;
}
