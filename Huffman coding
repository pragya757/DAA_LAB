#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TREE_HT 100

// Min Heap Node
typedef struct MinHeapNode {
    char data;
    unsigned freq;
    struct MinHeapNode *left, *right;
} MinHeapNode;

// Min Heap
typedef struct MinHeap {
    unsigned size;
    unsigned capacity;
    MinHeapNode **array;
} MinHeap;

// Function to create a new MinHeap Node
MinHeapNode* newNode(char data, unsigned freq) {
    MinHeapNode* temp = (MinHeapNode*)malloc(sizeof(MinHeapNode));
    temp->left = temp->right = NULL;
    temp->data = data;
    temp->freq = freq;
    return temp;
}

// Function to create a MinHeap
MinHeap* createMinHeap(unsigned capacity) {
    MinHeap* minHeap = (MinHeap*)malloc(sizeof(MinHeap));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (MinHeapNode**)malloc(minHeap->capacity * sizeof(MinHeapNode*));
    return minHeap;
}

// Function to swap two MinHeap Nodes
void swapMinHeapNode(MinHeapNode** a, MinHeapNode** b) {
    MinHeapNode* temp = *a;
    *a = *b;
    *b = temp;
}

// Function to heapify a MinHeap
void minHeapify(MinHeap* minHeap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->freq < minHeap->array[smallest]->freq)
        smallest = left;
    if (right < minHeap->size && minHeap->array[right]->freq < minHeap->array[smallest]->freq)
        smallest = right;

    if (smallest != idx) {
        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
}

// Function to check if size of heap is 1
int isSizeOne(MinHeap* minHeap) {
    return minHeap->size == 1;
}

// Function to extract the minimum node from heap
MinHeapNode* extractMin(MinHeap* minHeap) {
    MinHeapNode* temp = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    --minHeap->size;
    minHeapify(minHeap, 0);
    return temp;
}

// Function to insert a new node to MinHeap
void insertMinHeap(MinHeap* minHeap, MinHeapNode* minHeapNode) {
    ++minHeap->size;
    int i = minHeap->size - 1;
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) {
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    minHeap->array[i] = minHeapNode;
}

// Function to build the MinHeap
void buildMinHeap(MinHeap* minHeap) {
    int n = minHeap->size - 1;
    for (int i = (n - 1) / 2; i >= 0; --i) {
        minHeapify(minHeap, i);
    }
}

// Function to print the Huffman codes and store them in the codeTable
void printCodes(MinHeapNode* root, int arr[], int top, char* codeTable[]) {
    if (root->left) {
        arr[top] = 0;
        printCodes(root->left, arr, top + 1, codeTable);
    }
    if (root->right) {
        arr[top] = 1;
        printCodes(root->right, arr, top + 1, codeTable);
    }
    if (!root->left && !root->right) {
        printf("%c\t%d\t", root->data, root->freq);
        for (int i = 0; i < top; ++i) {
            printf("%d", arr[i]);
        }
        printf("\n");

        // Store the code in the codeTable
        codeTable[root->data] = (char*)malloc(top + 1);
        for (int i = 0; i < top; i++) {
            codeTable[root->data][i] = arr[i] + '0';  // Convert 0/1 to '0'/'1'
        }
        codeTable[root->data][top] = '\0';  // Null-terminate the string
    }
}

// Function to build the Huffman Tree
MinHeapNode* buildHuffmanTree(char data[], int freq[], int size) {
    MinHeapNode *left, *right, *top;

    MinHeap* minHeap = createMinHeap(size);

    for (int i = 0; i < size; ++i) {
        minHeap->array[i] = newNode(data[i], freq[i]);
    }
    minHeap->size = size;
    buildMinHeap(minHeap);

    while (!isSizeOne(minHeap)) {
        left = extractMin(minHeap);
        right = extractMin(minHeap);

        top = newNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        insertMinHeap(minHeap, top);
    }

    return extractMin(minHeap);
}

// Function to calculate the frequency of characters in a string
void calculateFrequency(char *str, int *freq, char *data, int *size) {
    int i = 0, j = 0;
    int n = strlen(str);

    // Initialize frequencies array to 0
    for (i = 0; i < 256; i++) {
        freq[i] = 0;
    }

    // Calculate frequency of each character
    for (i = 0; i < n; i++) {
        freq[(int)str[i]]++;
    }

    // Store the unique characters and their frequencies
    for (i = 0; i < 256; i++) {
        if (freq[i] > 0) {
            data[j] = (char)i;
            freq[j] = freq[i];
            j++;
        }
    }
    *size = j;
}

// Function to encode the string using Huffman codes
char* encode(char* str, char* codeTable[]) {
    static char encodedStr[1000];
    int index = 0;
    for (int i = 0; str[i] != '\0'; i++) {
        char* code = codeTable[(int)str[i]];
        while (*code) {
            encodedStr[index++] = *code;
            code++;
        }
    }
    encodedStr[index] = '\0';
    return encodedStr;
}

// Function to decode the encoded string using Huffman tree
void decode(MinHeapNode* root, char* encodedStr) {
    MinHeapNode* current = root;
    printf("\nDecoded string: ");
    for (int i = 0; encodedStr[i] != '\0'; i++) {
        if (encodedStr[i] == '0') {
            current = current->left;
        } else {
            current = current->right;
        }

        // If we reached a leaf node, print the character
        if (!current->left && !current->right) {
            printf("%c", current->data);
            current = root;  // Reset to root to decode next character
        }
    }
    printf("\n");
}

// Main function to drive the program
int main() {
    char str[1000];

    // Input: String of characters
    printf("Enter the string: ");
    scanf("%s", str);

    int freq[256] = {0};  // Frequency array for all ASCII characters
    char data[256];  // Store the unique characters
    int size = 0;  // Size of the data array

    // Calculate the frequency of characters in the string
    calculateFrequency(str, freq, data, &size);

    // Build Huffman Tree
    MinHeapNode* root = buildHuffmanTree(data, freq, size);

    // Print the Huffman Codes
    printf("\nCharacter\tFrequency\tHuffman Code\n");
    int arr[MAX_TREE_HT], top = 0;
    char* codeTable[256] = {0};  // Table to store Huffman codes
    printCodes(root, arr, top, codeTable);

    // Encode the string
    char* encodedStr = encode(str, codeTable);
    printf("\nEncoded string: %s\n", encodedStr);

    // Decode the encoded string
    decode(root, encodedStr);

    return 0;
}
