#include <stdio.h>
#include <limits.h>

#define N 10  // Maximum number of cities
#define INF INT_MAX

int n;  // Number of cities
int cost[N][N];  // Cost matrix
int dp[1 << N][N];  // DP table for memoization

// Function to find the minimum cost for TSP using DP & Bitmasking
int tsp(int mask, int pos) {
    if (mask == (1 << n) - 1)  // All cities visited
        return cost[pos][0];  // Return to starting city
    
    if (dp[mask][pos] != -1)  // Already computed
        return dp[mask][pos];

    int minCost = INF;

    for (int city = 0; city < n; city++) {
        if ((mask & (1 << city)) == 0) {  // If city not visited
            int newCost = cost[pos][city] + tsp(mask | (1 << city), city);
            if (newCost < minCost)
                minCost = newCost;
        }
    }

    return dp[mask][pos] = minCost;
}

int main() {
    printf("Enter number of cities: ");
    scanf("%d", &n);

    printf("Enter cost matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    // Initialize DP table with -1
    for (int i = 0; i < (1 << n); i++)
        for (int j = 0; j < n; j++)
            dp[i][j] = -1;

    printf("Minimum cost of travelling salesman tour: %d\n", tsp(1, 0));  
    return 0;
}
